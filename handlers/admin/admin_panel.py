"""
Handler for command --> /admin ‚úÖ
Handler for callback --> admin:admin ‚úÖ
Handler for callback --> admin:users ‚úÖ
                            --> admin:active_ban ‚úÖ
                            --> admin:active_ban_list ‚úÖ
                            --> admin:found_user ‚úÖ
                                --> admin:user_ban ‚úÖ
                                --> admin:user_unban ‚úÖ
                                --> admin:user_mes ‚úÖ
Handler for callback --> admin:error_logs ‚úÖ
Handler for callback --> admin:payments
Handler for callback --> admin:broadcast
"""

import html
from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from sqlalchemy.ext.asyncio import AsyncSession

from database.crud import get_active_ban_count, get_active_bans_list

from filters.is_admin import AdminFilter
from keyboards import admin_kb, users_kb
from keyboards.admin_keyboard import search_user_kb
from services import BACK_BUTTON, add_back_to_admin_button
from services.format_ban import format_ban_list
from middlewares import logger
from config import admin
from utilities.error_logs import get_error_logs

admin_router = Router()
admin_router.callback_query.filter(AdminFilter(admin))


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@admin_router.callback_query(F.data == "admin:admin")
@admin_router.message(F.text == "/admin")
async def admin(update: Message | CallbackQuery):
    """Get admin keyboards"""
    if isinstance(update, CallbackQuery):
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∫–æ–ª–±—ç–∫–∞")
        await update.answer()
        message = update.message
    else:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∫–æ–º–∞–Ω–¥—ã")
        message = update

    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚õèÔ∏è", reply_markup=admin_kb())


# --- –†–∞–∑–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@admin_router.callback_query(F.data == "admin:users")
async def get_admin_users(callback: CallbackQuery):
    await callback.answer()
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –∫–æ–ª–±—ç–∫–∞")
    await callback.message.answer(
        "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", reply_markup=users_kb()
    )


@admin_router.callback_query(F.data == "admin:found_user")
async def found_user(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:", reply_markup=search_user_kb()
    )


@admin_router.callback_query(F.data == "admin:active_ban")
async def get_active_ban(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    ban_count = await get_active_ban_count(session)

    list_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤",
                    callback_data="admin:active_ban_list",
                )
            ]
        ]
    )
    await callback.message.answer(
        f"üî¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: <b>{ban_count}</b>\n",
        parse_mode="HTML",
        reply_markup=add_back_to_admin_button(list_button),
    )


@admin_router.callback_query(F.data == "admin:active_ban_list")
async def show_first_ban_page(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()

    ban_list = await get_active_bans_list(session)

    await callback.message.answer(format_ban_list(ban_list), reply_markup=BACK_BUTTON)


# --- –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@admin_router.callback_query(F.data == "admin:error_logs")
async def get_admin_logs(callback: CallbackQuery):
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ª–æ–≥–∏...")

    logs = await get_error_logs()

    if not logs:
        await callback.message.answer(
            "üì≠ –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –æ—à–∏–±–æ–∫ ERROR/WARNING/DEBUG",
        )

    safe_logs = html.escape(logs)

    await callback.message.answer(
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n" f"<pre>{safe_logs}</pre>",
        parse_mode="HTML",
        reply_markup=BACK_BUTTON,
    )


# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã ---
@admin_router.callback_query(F.data == "admin:payments")
async def get_admin_payments(callback: CallbackQuery):
    await callback.answer()
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö —Å –∫–æ–ª–±—ç–∫–∞")
    await callback.message.answer(
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –∏–Ω—Ñ–∞ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö" "–ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —è –≤–∫–ª—é—á—É –ø–ª–∞—Ç–µ–∂–∏",
    )


@admin_router.callback_query(F.data == "admin:broadcast")
async def get_admin_broadcast(callback: CallbackQuery):
    await callback.answer()
    logger.info("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å –∫–æ–ª–±—ç–∫–∞")
    await callback.message.answer(
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–µ–∂–∞—Ç—å –ø—Ä–∏–±–ª—É–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫",
    )
